###
# Sentilab SARE: a Sentiment Analysis Research Environment
# Copyright (C) 2013 Sabanci University Sentilab
# http://sentilab.sabanciuniv.edu
#
# This file is part of SARE.
#
# SARE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SARE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SARE. If not, see <http://www.gnu.org/licenses/>.
###

# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET      /                                                                   controllers.base.Application.homePage()

# Pages
GET      /pages/index.html                                                   controllers.base.Application.indexPage()
GET      /pages/about.html                                                   controllers.base.Application.aboutPage()
GET      /pages/contact.html                                                 controllers.base.Application.contactPage()
GET      /pages/privacy.html                                                 controllers.base.Application.privacyPage()

# Authentication
POST     /api/v1/session.json                                                controllers.base.Application.keepAlive()
DELETE   /api/v1/session.json                                                controllers.base.Application.logout()
POST     /api/v1/session/login.json                                          controllers.base.Application.login(redirectTo: String ?= null, isGuest: Boolean ?= false)

GET      /session/login.html                                                 controllers.base.Application.loginPage(redirectTo: String ?= null, isGuest: Boolean ?= false)
GET      /session/logout.html                                                controllers.base.Application.logoutPage()

# Collections
GET      /api/v1/collections.json                                            controllers.CollectionsController.list()
GET      /api/v1/collections/:collection.json                                controllers.CollectionsController.get(collection: UUID)
DELETE   /api/v1/collections/:collection.json                                controllers.CollectionsController.delete(collection: UUID)

GET      /collections/:collection/form.html                                  controllers.CollectionsController.detailsForm(collection: UUID)

# Documents
GET      /api/v1/collections/:collection/documents.json                      controllers.DocumentsController.list(collection: UUID)
GET      /api/v1/collections/documents/:document.json                        controllers.DocumentsController.get(collection: UUID = null, document: String)
GET      /api/v1/collections/:collection/documents/:document.json            controllers.DocumentsController.get(collection: UUID, document: String)

GET      /collections/documents/:document.html                               controllers.DocumentsController.editorView(collection: UUID = null, document: UUID)
GET      /collections/:collection/documents/:document.html                   controllers.DocumentsController.editorView(collection: UUID, document: UUID)

# Modules
GET      /api/v1/modules/options.json                                        controllers.ModuleController.options(input: String = "[]")
GET      /api/v1/modules/options/:input.json                                 controllers.ModuleController.options(input: String)

GET      /modules.html                                                       controllers.ModuleController.landingPage()

# Corpus module
GET      /modules/corpora.html                                               controllers.modules.CorpusModule.modulePage(partial: Boolean ?= false)
GET      /modules/corpora/:corpus/twitterGrabber.html                        controllers.modules.CorpusModule.twitterGrabberView(corpus: UUID)

# Opinions (special corpus)
POST     /api/v1/modules/opinions.json                                       controllers.modules.CorpusModule.create()
POST     /api/v1/modules/opinions/:corpus.json                               controllers.modules.CorpusModule.update(corpus: UUID)
POST     /api/v1/modules/opinions/:corpus/documents.json                     controllers.modules.CorpusModule.addDocument(corpus: UUID)
POST     /api/v1/modules/opinions/:corpus/documents/:document.json           controllers.modules.CorpusModule.updateDocument(corpus: UUID, document: UUID)
DELETE   /api/v1/modules/opinions/:corpus/documents/:document.json           controllers.modules.CorpusModule.deleteDocument(corpus: UUID, document: UUID)

# Aspect lexicon builder module
POST     /api/v1/modules/alexica.json                                        controllers.modules.AspectLexBuilder.create(corpus: UUID ?= null)
POST     /api/v1/modules/alexica/:lexicon.json                               controllers.modules.AspectLexBuilder.update(corpus: UUID ?= null, lexicon: UUID)

GET      /api/v1/modules/corpora/:corpus/alex-builder/documents/next.json    controllers.modules.AspectLexBuilder.getDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long = -1)
GET      /api/v1/modules/corpora/:corpus/alex-builder/documents/:rank.json   controllers.modules.AspectLexBuilder.getDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long)
POST     /api/v1/modules/corpora/:corpus/alex-builder/documents/next.json    controllers.modules.AspectLexBuilder.seeDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long = -1)
POST     /api/v1/modules/corpora/:corpus/alex-builder/documents/:rank.json   controllers.modules.AspectLexBuilder.seeDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long)

GET      /api/v1/modules/alexica/aspects/:aspect.json                        controllers.modules.AspectLexBuilder.getAspect(lexicon: UUID = null, aspect: String, recursive: Boolean ?= false)
GET      /api/v1/modules/alexica/:lexicon/aspects/:aspect.json               controllers.modules.AspectLexBuilder.getAspect(lexicon: UUID, aspect: String, recursive: Boolean ?= false)
GET      /api/v1/modules/alexica/:lexicon/aspects.json                       controllers.modules.AspectLexBuilder.getAspects(lexicon: UUID)
POST     /api/v1/modules/alexica/aspects/:aspect.json                        controllers.modules.AspectLexBuilder.updateAspect(lexicon: UUID = null, aspect: UUID)
POST     /api/v1/modules/alexica/:lexicon/aspects/:aspect.json               controllers.modules.AspectLexBuilder.updateAspect(lexicon: UUID, aspect: UUID)
POST     /api/v1/modules/alexica/:lexicon/aspects.json                       controllers.modules.AspectLexBuilder.addAspect(lexicon: UUID)
DELETE   /api/v1/modules/alexica/aspects/:aspect.json                        controllers.modules.AspectLexBuilder.deleteAspect(lexicon: UUID = null, aspect: UUID)
DELETE   /api/v1/modules/alexica/:lexicon/aspects/:aspect.json               controllers.modules.AspectLexBuilder.deleteAspect(lexicon: UUID, aspect: UUID)

GET      /api/v1/modules/alexica/aspects/keywords/:expression.json           controllers.modules.AspectLexBuilder.getExpression(aspect: UUID = null, expression: String, recursive: Boolean ?= false)
GET      /api/v1/modules/alexica/aspects/:aspect/keywords/:expression.json   controllers.modules.AspectLexBuilder.getExpression(aspect: UUID, expression: String, recursive: Boolean ?= false)
GET      /api/v1/modules/alexica/aspects/:aspect/keywords.json               controllers.modules.AspectLexBuilder.getExpressions(aspect: UUID)
POST     /api/v1/modules/alexica/aspects/keywords/:expression.json           controllers.modules.AspectLexBuilder.updateExpression(aspect: UUID = null, expression: UUID)
POST     /api/v1/modules/alexica/aspects/:aspect/keywords/:expression.json   controllers.modules.AspectLexBuilder.updateExpression(aspect: UUID, expression: UUID)
POST     /api/v1/modules/alexica/aspects/:aspect/keywords.json               controllers.modules.AspectLexBuilder.addExpression(aspect: UUID)
DELETE   /api/v1/modules/alexica/aspects/keywords/:expression.json           controllers.modules.AspectLexBuilder.deleteExpression(aspect: UUID = null, expression: UUID)
DELETE   /api/v1/modules/alexica/aspects/:aspect/keywords/:expression.json   controllers.modules.AspectLexBuilder.deleteExpression(aspect: UUID, expression: UUID)

GET      /modules/alexica/builder.html                                       controllers.modules.AspectLexBuilder.modulePage(corpus: UUID ?= null, lexicon: UUID = null, partial: Boolean ?= false)
GET      /modules/alexica/:lexicon/builder.html                              controllers.modules.AspectLexBuilder.modulePage(corpus: UUID ?= null, lexicon: UUID, partial: Boolean ?= false)

GET      /modules/corpora/:corpus/alex-builder/documents.html                controllers.modules.AspectLexBuilder.documentsView(corpus: UUID, lexicon: UUID)
GET      /modules/alexica/:lexicon.html                                      controllers.modules.AspectLexBuilder.lexiconView(lexicon: UUID)

# Aspect expression extraction modules
GET      /modules/corpora/expr-extractor.html                                controllers.modules.AspectExprExtractor.modulePage(corpus: UUID = null, lexicon: UUID ?= null, partial: Boolean ?= false)
GET      /modules/corpora/:corpus/expr-extractor.html                        controllers.modules.AspectExprExtractor.modulePage(corpus: UUID, lexicon: UUID ?= null, partial: Boolean ?= false)
POST	 /modules/corpora/:corpus/expr-extractor.json						 controllers.modules.AspectExprExtractor.extract(corpus: UUID, lexicon: UUID ?= null)
POST	 /modules/corpora/expr-extractor.json								 controllers.modules.AspectExprExtractor.redeem(token: UUID ?= null)

# Corpus optimization module
GET      /modules/corpora/optimizations/:setcover.html                       controllers.modules.SetCoverBuilder.modulePage(corpus: UUID = null, setcover: UUID, partial: Boolean ?= false)
GET      /modules/corpora/:corpus/optimizations.html                         controllers.modules.SetCoverBuilder.modulePage(corpus: UUID, setcover: UUID = null, partial: Boolean ?= false)
GET      /modules/corpora/:corpus/optimizations/:setcover.html               controllers.modules.SetCoverBuilder.modulePage(corpus: UUID, setcover: UUID, partial: Boolean ?= false)
GET      /modules/corpora/optimizations/:setcover/editor.html                controllers.modules.SetCoverBuilder.editorView(setcover: UUID)

GET      /api/v1/modules/corpora/optimizations/:setcover.json                controllers.modules.SetCoverBuilder.getSetCover(setcover: UUID, includeMatrix: Boolean ?= false)
POST     /api/v1/modules/corpora/optimizations/:setcover.json                controllers.modules.SetCoverBuilder.update(corpus: UUID = null, setcover: UUID)
POST     /api/v1/modules/corpora/:corpus/optimizations/:setcover.json        controllers.modules.SetCoverBuilder.update(corpus: UUID, setcover: UUID)
POST     /api/v1/modules/corpora/:corpus/optimizations.json                  controllers.modules.SetCoverBuilder.create(corpus: UUID)
POST     /api/v1/modules/corpora/optimizations/:setcover/redeemer.json       controllers.modules.SetCoverBuilder.redeem(setcover: UUID)

# Aspect-based opinion miner modules
GET      /modules/opinion-miners/aspect-based/:engine.html                   controllers.modules.opinionMiners.base.AspectOpinionMiner.modulePage(corpus: UUID ?= null, lexicon: UUID ?= null, engine: String, partial: Boolean ?= false)
GET      /modules/opinion-miners/aspect-based/:engine/editor.html            controllers.modules.opinionMiners.base.AspectOpinionMiner.editorView(corpus: UUID, lexicon: UUID, engine: String)
GET      /modules/opinion-miners/aspect-based/:engine/results.html           controllers.modules.opinionMiners.base.AspectOpinionMiner.resultsView(corpus: UUID, lexicon: UUID, engine: String, standalone: Boolean ?= false)

GET      /api/v1/modules/opinion-miners/aspect-based/:engine/results.json    controllers.modules.opinionMiners.base.AspectOpinionMiner.getMined(corpus: UUID, lexicon: UUID, engine: String, detailed: Boolean ?= true)
POST     /api/v1/modules/opinion-miners/aspect-based/:engine/results.json    controllers.modules.opinionMiners.base.AspectOpinionMiner.mine(corpus: UUID, lexicon: UUID, engine: String)
POST     /api/v1/modules/opinion-miners/aspect-based/redeemer/:token.json    controllers.modules.opinionMiners.base.AspectOpinionMiner.redeem(token: UUID)

# Support queries
GET      /api/v1/support/languages.json                                      controllers.CollectionsController.supportedLanguages()

# Javascript routes file
GET      /assets/javascripts/routes.js                                       controllers.base.Application.javascriptRoutes()

# Map static resources from the /public folder to the /assets URL path
GET      /assets/*file                                                       controllers.Assets.at(path="/public", file)
