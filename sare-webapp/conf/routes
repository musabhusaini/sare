###
# Sentilab SARE: a Sentiment Analysis Research Environment
# Copyright (C) 2013 Sabanci University Sentilab
# http://sentilab.sabanciuniv.edu
#
# This file is part of SARE.
#
# SARE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SARE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SARE. If not, see <http://www.gnu.org/licenses/>.
###

# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /		controllers.base.Application.homePage()

# Authentication
POST		/api/session				controllers.base.Application.keepAlive()
DELETE	/api/session				controllers.base.Application.logout()
POST		/api/session/login	controllers.base.Application.login()

GET		/view/session/login		controllers.base.Application.loginPage()
GET		/view/session/logout	controllers.base.Application.logoutPage()

# Collections
GET			/api/collections										controllers.CollectionsController.list()
GET			/api/collections/:collection				controllers.CollectionsController.get(collection: UUID)
DELETE	/api/collections/:collection				controllers.CollectionsController.delete(collection: UUID)
GET			/view/collections/:collection/form	controllers.CollectionsController.detailsForm(collection: UUID)

# Documents
GET		/api/collections/:collection/documents						controllers.DocumentsController.list(collection: UUID)
GET		/api/collections/:collection/documents/:document	controllers.DocumentsController.get(collection: UUID, document: UUID)

# Modules
GET		/api/modules/options/:input	controllers.ModuleController.options(input: String)
GET		/view/modules								controllers.ModuleController.landingPage()

# Corpus module
GET		/view/modules/corpora													controllers.modules.CorpusModule.modulePage(partial: Boolean ?= false)
GET		/view/modules/corpora/:corpus/twitterGrabber	controllers.modules.CorpusModule.twitterGrabberView(corpus: UUID)

# Opinions (special corpus)
POST		/api/modules/opinions															controllers.modules.CorpusModule.create()
POST		/api/modules/opinions/:corpus											controllers.modules.CorpusModule.update(corpus: UUID)
POST		/api/modules/opinions/:corpus/documents						controllers.modules.CorpusModule.addDocument(corpus: UUID)
POST		/api/modules/opinions/:corpus/documents/:document	controllers.modules.CorpusModule.updateDocument(corpus: UUID, document: UUID)
DELETE	/api/modules/opinions/:corpus/documents/:document	controllers.modules.CorpusModule.deleteDocument(corpus: UUID, document: UUID)

# Aspect lexicon builder module
POST	/api/modules/lexica														controllers.modules.AspectLexBuilder.create(corpus: UUID = null)
POST	/api/modules/corpora/:corpus/lexica						controllers.modules.AspectLexBuilder.create(corpus: UUID)
POST	/api/modules/lexica/:lexicon									controllers.modules.AspectLexBuilder.update(corpus: UUID = null, lexicon: UUID)
POST	/api/modules/corpora/:corpus/lexica/:lexicon	controllers.modules.AspectLexBuilder.update(corpus: UUID, lexicon: UUID)

GET		/api/modules/corpora/:corpus/lexica/:lexicon/documents/next		controllers.modules.AspectLexBuilder.getDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long = -1)
GET		/api/modules/corpora/:corpus/lexica/:lexicon/documents/:rank	controllers.modules.AspectLexBuilder.getDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long)
POST	/api/modules/corpora/:corpus/lexica/:lexicon/documents/next		controllers.modules.AspectLexBuilder.seeDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long = -1)
POST	/api/modules/corpora/:corpus/lexica/:lexicon/documents/:rank	controllers.modules.AspectLexBuilder.seeDocument(corpus: UUID, lexicon: UUID, emphasis: String ?= null, rank: Long)

GET			/api/modules/lexica/aspects/:aspect						controllers.modules.AspectLexBuilder.getAspect(lexicon: UUID = null, aspect: String, recursive: Boolean ?= false)
GET			/api/modules/lexica/:lexicon/aspects/:aspect	controllers.modules.AspectLexBuilder.getAspect(lexicon: UUID, aspect: String, recursive: Boolean ?= false)
GET			/api/modules/lexica/:lexicon/aspects					controllers.modules.AspectLexBuilder.getAspects(lexicon: UUID)
POST		/api/modules/lexica/aspects/:aspect						controllers.modules.AspectLexBuilder.updateAspect(lexicon: UUID = null, aspect: UUID)
POST		/api/modules/lexica/:lexicon/aspects/:aspect	controllers.modules.AspectLexBuilder.updateAspect(lexicon: UUID, aspect: UUID)
POST		/api/modules/lexica/:lexicon/aspects					controllers.modules.AspectLexBuilder.addAspect(lexicon: UUID)
DELETE	/api/modules/lexica/aspects/:aspect						controllers.modules.AspectLexBuilder.deleteAspect(lexicon: UUID = null, aspect: UUID)
DELETE	/api/modules/lexica/:lexicon/aspects/:aspect	controllers.modules.AspectLexBuilder.deleteAspect(lexicon: UUID, aspect: UUID)

GET			/api/modules/lexica/aspects/keywords/:expression					controllers.modules.AspectLexBuilder.getExpression(aspect: UUID = null, expression: String, recursive: Boolean ?= false)
GET			/api/modules/lexica/aspects/:aspect/keywords/:expression	controllers.modules.AspectLexBuilder.getExpression(aspect: UUID, expression: String, recursive: Boolean ?= false)
GET			/api/modules/lexica/aspects/:aspect/keywords							controllers.modules.AspectLexBuilder.getExpressions(aspect: UUID)
POST		/api/modules/lexica/aspects/keywords/:expression					controllers.modules.AspectLexBuilder.updateExpression(aspect: UUID = null, expression: UUID)
POST		/api/modules/lexica/aspects/:aspect/keywords/:expression	controllers.modules.AspectLexBuilder.updateExpression(aspect: UUID, expression: UUID)
POST		/api/modules/lexica/aspects/:aspect/keywords							controllers.modules.AspectLexBuilder.addExpression(aspect: UUID)
DELETE	/api/modules/lexica/aspects/keywords/:expression					controllers.modules.AspectLexBuilder.deleteExpression(aspect: UUID = null, expression: UUID)
DELETE	/api/modules/lexica/aspects/:aspect/keywords/:expression	controllers.modules.AspectLexBuilder.deleteExpression(aspect: UUID, expression: UUID)

GET		/view/modules/lexica/builder													controllers.modules.AspectLexBuilder.modulePage(corpus: UUID = null, lexicon: UUID = null, partial: Boolean ?= false)
GET		/view/modules/lexica/:lexicon/builder									controllers.modules.AspectLexBuilder.modulePage(corpus: UUID = null, lexicon: UUID, partial: Boolean ?= false)
GET		/view/modules/corpora/:corpus/lexica/builder					controllers.modules.AspectLexBuilder.modulePage(corpus: UUID, lexicon: UUID = null, partial: Boolean ?= false)
GET		/view/modules/corpora/:corpus/lexica/:lexicon/builder	controllers.modules.AspectLexBuilder.modulePage(corpus: UUID, lexicon: UUID, partial: Boolean ?= false)

GET		/view/modules/corpora/:corpus/lexica/:lexicon/documents	controllers.modules.AspectLexBuilder.documentsView(corpus: UUID, lexicon: UUID)
GET		/view/modules/lexica/:lexicon														controllers.modules.AspectLexBuilder.lexiconView(lexicon: UUID)

# Corpus optimization module
GET		/view/modules/corpora/optimizations/:setcover					controllers.modules.SetCoverBuilder.modulePage(corpus: UUID = null, setcover: UUID, partial: Boolean ?= false)
GET		/view/modules/corpora/:corpus/optimizations						controllers.modules.SetCoverBuilder.modulePage(corpus: UUID, setcover: UUID = null, partial: Boolean ?= false)
GET		/view/modules/corpora/:corpus/optimizations/:setcover	controllers.modules.SetCoverBuilder.modulePage(corpus: UUID, setcover: UUID, partial: Boolean ?= false)
GET		/view/modules/corpora/optimizations/:setcover/editor	controllers.modules.SetCoverBuilder.editorView(setcover: UUID)
GET		/api/modules/corpora/optimizations/:setcover					controllers.modules.SetCoverBuilder.getSetCover(setcover: UUID, includeMatrix: Boolean ?= false)
POST	/api/modules/corpora/optimizations/:setcover					controllers.modules.SetCoverBuilder.update(corpus: UUID = null, setcover: UUID)
POST	/api/modules/corpora/:corpus/optimizations/:setcover	controllers.modules.SetCoverBuilder.update(corpus: UUID, setcover: UUID)
POST	/api/modules/corpora/:corpus/optimizations						controllers.modules.SetCoverBuilder.create(corpus: UUID)
POST	/api/modules/corpora/optimizations/:setcover/redeemer	controllers.modules.SetCoverBuilder.redeem(setcover: UUID)

# UbiPOL opinion miner module
GET		/view/modules/ubipol-opminer																	controllers.modules.UbiPolOpinionMiner.modulePage(corpus: UUID = null, lexicon: UUID = null, partial: Boolean ?= false)
GET		/view/modules/lexica/:lexicon/ubipol-opminer									controllers.modules.UbiPolOpinionMiner.modulePage(corpus: UUID = null, lexicon: UUID, partial: Boolean ?= false)
GET		/view/modules/corpora/:corpus/ubipol-opminer									controllers.modules.UbiPolOpinionMiner.modulePage(corpus: UUID, lexicon: UUID = null, partial: Boolean ?= false)
GET		/view/modules/corpora/:corpus/lexica/:lexicon/ubipol-opminer	controllers.modules.UbiPolOpinionMiner.modulePage(corpus: UUID, lexicon: UUID, partial: Boolean ?= false)

# Support queries
GET	/api/support/languages		controllers.CollectionsController.supportedLanguages()

# Map static resources from the /public folder to the /assets URL path
GET	/assets/javascripts/routes.js	controllers.base.Application.javascriptRoutes()
GET	/assets/*file									controllers.Assets.at(path="/public", file)
